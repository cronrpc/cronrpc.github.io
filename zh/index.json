[{"content":"随机噪声 Perlin Noise 简单来说，**Perlin Noise（柏林噪声）**是一种用来生成自然、平滑随机变化的算法，广泛应用于计算机图形学里，用来模拟自然界中的纹理和形态，比如云彩、火焰、地形、木纹、水面波纹等等。\n1D Perlin Noise Generator 2D Perlin Noise Generator ","permalink":"https://cronrpc.github.io/zh/posts/perlin-noise-generator/","summary":"\u003ch2 id=\"随机噪声\"\u003e随机噪声\u003c/h2\u003e\n\u003ch2 id=\"perlin-noise\"\u003ePerlin Noise\u003c/h2\u003e\n\u003cp\u003e简单来说，**Perlin Noise（柏林噪声）**是一种用来生成自然、平滑随机变化的算法，广泛应用于计算机图形学里，用来模拟自然界中的纹理和形态，比如云彩、火焰、地形、木纹、水面波纹等等。\u003c/p\u003e","title":"Perlin Noise Generator"},{"content":"本文仅聚焦于如下几个问题：\n从三角级数展开，过渡到欧拉形式的傅里叶变换 什么是离散傅里叶变换 什么是2D傅里叶变换 从2D傅里叶变换，解释到2D离散傅里叶变换 如何对图像进行2D傅里叶变换 2D傅里叶变换的周期性问题 从2D傅里叶变换的周期性理解傅里叶2D频谱图的中心化 傅里叶级数 傅里叶级数是一种数学工具，它表示一个周期函数为一组正弦和余弦函数的无穷和。\n三角级数展开 傅里叶变换最初是基于三角级数展开，即周期函数可以表示为一系列正弦和余弦函数的线性组合：\n$$ f(t) = a_0 + \\sum_{n=1}^{\\infty} a_n \\cos(n\\omega_0 t) + b_n \\sin(n\\omega_0 t) $$\n其中 $\\omega_0 = \\frac{2\\pi}{T}$ 是基本频率。\n复指数形式 利用欧拉公式：\n$$ \\cos(x) = \\frac{e^{ix} + e^{-ix}}{2}, \\quad \\sin(x) = \\frac{e^{ix} - e^{-ix}}{2i} $$\n可以将傅里叶级数改写为复指数形式：\n$$ f(t) = \\sum_{n=-\\infty}^{\\infty} c_n e^{in\\omega_0 t} $$\n其中 $c_n$ 是复数系数，封装了正弦和余弦部分的信息。欧拉形式的傅里叶表示更对称、更易于处理，也为后续推广到连续和多维情况提供了基础。\n在这里，$n$的取值范围变成了$-\\infty$到$\\infty$。\n离散傅里叶变换 DFT 离散傅里叶变换（Discrete Fourier Transform，简称 DFT）是傅里叶分析的一个重要分支，它的作用是将离散的有限长度信号（通常是数字信号）从时间域/空间域转换到频率域，表示成一组复数频率分量的叠加。\n实际中我们处理的是有限、离散的数据。离散傅里叶变换（DFT）定义如下：\n$$ X[k] = \\sum_{n=0}^{N-1} x[n] \\cdot e^{-i \\frac{2\\pi}{N}kn}, \\quad k = 0, 1, \\dots, N-1 $$\n对应的逆变换为：\n$$ x[n] = \\frac{1}{N} \\sum_{k=0}^{N-1} X[k] \\cdot e^{i \\frac{2\\pi}{N}kn} $$\nDFT 把时间域信号 $x[n]$ 映射到频域 $X[k]$，每个 $X[k]$ 对应一个频率分量的幅度和相位。\n负频率、周期重排 离散傅里叶变换中，可以有负频率。\n虽然 DFT 的索引 $k$ 是非负整数，但傅里叶频率具有模 $N$ 的周期性。\n也就是说：\n$$ e^{-j \\frac{2\\pi}{N} k n} = e^{-j \\frac{2\\pi}{N} (k + mN) n}, \\quad \\forall m \\in \\mathbb{Z} $$\n因此，频率 $k = N - 1$ 实际上等价于频率 $-1$，频率 $k = N - 2$ 等价于 $-2$，以此类推。\n我们可以将频率索引重新解释为从负频率到正频率：\n$$ k = -\\frac{N}{2}, \\dots, -1, 0, 1, \\dots, \\frac{N}{2} - 1 \\quad (\\text{当 } N \\text{ 为偶数时}) $$\n这种方式可以通过频谱的中心化重排，使得结果更符合频率对称直觉。\n在后面的对图像的2D傅里叶变换后，频谱图通过中心化重排后，将低频区域全部变换到中央。\n2D傅里叶变换 傅里叶变换可以从将原本的1D形式，扩展到2D形式。\n什么是2D傅里叶变换 连续2D傅里叶变换的定义如下，对于一个连续函数 $f(x, y)$：\n$$ F(u, v) = \\iint_{-\\infty}^{\\infty} f(x, y) \\cdot e^{-i2\\pi (ux + vy)} , dx,dy $$\n其逆变换为：\n$$ f(x, y) = \\iint_{-\\infty}^{\\infty} F(u, v) \\cdot e^{i2\\pi (ux + vy)} , du,dv $$\n其中 $(x, y)$ 是空间域坐标，$(u, v)$ 是频率域坐标。变换结果 $F(u, v)$ 描述了信号中每个频率分量的幅值和相位。\n2D 离散傅里叶变换 离散情况下，对于一个 $M \\times N$ 的二维离散函数 $f[m, n]$，其二维离散傅里叶变换（2D DFT）定义为：\n$$ F[k, l] = \\sum_{m=0}^{M-1} \\sum_{n=0}^{N-1} f[m, n] \\cdot e^{-i 2\\pi \\left( \\frac{km}{M} + \\frac{ln}{N} \\right)} $$\n其逆变换为：\n$$ f[m, n] = \\frac{1}{MN} \\sum_{k=0}^{M-1} \\sum_{l=0}^{N-1} F[k, l] \\cdot e^{i 2\\pi \\left( \\frac{km}{M} + \\frac{ln}{N} \\right)} $$\n2D傅里叶变换的周期性 类似于1D DFT，2D DFT 也具有周期性：\n$$ F[k + M, l] = F[k, l], \\quad F[k, l + N] = F[k, l] $$\n这意味着频谱在两个方向（水平和垂直）上都是周期性的。\nDFT 中的频率索引 $k$ 和 $l$ 取值范围是 $0$ 到 $M-1$ 和 $N-1$，但这些索引并不是单纯的“正频率”，它们是模周期的。\n因为周期是 $M$ 和 $N$，所以后半部分可以看作对应的负频率分量。具体来说，当索引 $k \u0026gt; \\frac{M}{2}$ 时，实际频率等价于 $k - M$ 对应的负频率；同理，当索引 $l \u0026gt; \\frac{N}{2}$ 时，频率等价于 $l - N$ 对应的负频率。这样，频率索引的范围在 $[0, M-1]$ 和 $[0, N-1]$ 上循环，形成正负频率对称的结构。\n如何对图像进行2D傅里叶变换 Python 中可以使用 numpy 或 opencv 等库方便地进行 2D 傅里叶变换。例如，使用 NumPy：\nimport numpy as np import matplotlib.pyplot as plt from PIL import Image # 加载图像并转换为灰度 img = Image.open(\u0026#39;doge.jpg\u0026#39;).convert(\u0026#39;L\u0026#39;) f = np.array(img) # 计算2D傅里叶变换 F = np.fft.fft2(f) # 幅度谱与相位谱 magnitude_spectrum = np.abs(F) phase_spectrum = np.angle(F) log_magnitude = np.log(1 + magnitude_spectrum) # 创建子图 fig, axs = plt.subplots(1, 3, figsize=(15, 5)) # 原始图像 axs[0].imshow(f, cmap=\u0026#39;gray\u0026#39;) axs[0].set_title(\u0026#39;Original Image\u0026#39;) axs[0].axis(\u0026#39;off\u0026#39;) # 幅度谱 axs[1].imshow(log_magnitude, cmap=\u0026#39;gray\u0026#39;) axs[1].set_title(\u0026#39;Magnitude Spectrum (log)\u0026#39;) axs[1].axis(\u0026#39;off\u0026#39;) # 相位谱 im = axs[2].imshow(phase_spectrum, cmap=\u0026#39;gray\u0026#39;) axs[2].set_title(\u0026#39;Phase Spectrum\u0026#39;) axs[2].axis(\u0026#39;off\u0026#39;) # 添加 colorbar 到相位谱 fig.colorbar(im, ax=axs[2], shrink=0.7) plt.tight_layout() plt.show() 运行后可以看到幅度谱和相位谱，这里需要注意的一点在于，\n逆变换还原图像（频率+相位） 傅里叶变换的结果是复数，包含了幅度（Magnitude）和相位（Phase）信息。只保留其中之一就不能完整还原图像。\n还原图像的方式如下：\nimport numpy as np import matplotlib.pyplot as plt from PIL import Image # 加载图像并转换为灰度 img = Image.open(\u0026#39;doge.jpg\u0026#39;).convert(\u0026#39;L\u0026#39;) f = np.array(img) # 计算2D傅里叶变换 F = np.fft.fft2(f) # 进行逆傅里叶变换 recovered = np.fft.ifft2(F) recovered_real = np.real(recovered) plt.imshow(recovered_real, cmap=\u0026#39;gray\u0026#39;) plt.title(\u0026#39;Recovered Image from IFFT\u0026#39;) plt.axis(\u0026#39;off\u0026#39;) plt.show() 逆变换后应该和原图一样。\n频谱图中心化 为了更清晰地观察频率分布，我们通常对频谱进行中心化，使低频位于中心，高频分布在周围。\n中心化操作可以使用 np.fft.fftshift：\nimport cv2 import numpy as np import matplotlib.pyplot as plt img = cv2.imread(\u0026#39;doge.jpg\u0026#39;, cv2.IMREAD_GRAYSCALE) f = np.fft.fft2(img) fshift = np.fft.fftshift(f) magnitude_spectrum = 20 * np.log(np.abs(fshift) + 1) plt.figure(figsize=(12, 6)) plt.subplot(1, 2, 1) plt.title(\u0026#39;Original Image\u0026#39;) plt.imshow(img, cmap=\u0026#39;gray\u0026#39;) plt.subplot(1, 2, 2) plt.title(\u0026#39;Magnitude Spectrum\u0026#39;) plt.imshow(magnitude_spectrum, cmap=\u0026#39;gray\u0026#39;) plt.show() 此时频谱图将低频成分移到了中心，更易于观察纹理和方向性等信息。\n中心大致可以表示轮廓信息，而细节纹理是高频信息位于边缘。\n","permalink":"https://cronrpc.github.io/zh/posts/2d-fourier-transform/","summary":"\u003cp\u003e本文仅聚焦于如下几个问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e从三角级数展开，过渡到欧拉形式的傅里叶变换\u003c/li\u003e\n\u003cli\u003e什么是离散傅里叶变换\u003c/li\u003e\n\u003cli\u003e什么是2D傅里叶变换\u003c/li\u003e\n\u003cli\u003e从2D傅里叶变换，解释到2D离散傅里叶变换\u003c/li\u003e\n\u003cli\u003e如何对图像进行2D傅里叶变换\u003c/li\u003e\n\u003cli\u003e2D傅里叶变换的周期性问题\u003c/li\u003e\n\u003cli\u003e从2D傅里叶变换的周期性理解傅里叶2D频谱图的中心化\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"傅里叶级数\"\u003e傅里叶级数\u003c/h2\u003e\n\u003cp\u003e傅里叶级数是一种数学工具，它表示一个周期函数为一组正弦和余弦函数的无穷和。\u003c/p\u003e","title":"2D Fourier Transform"}]